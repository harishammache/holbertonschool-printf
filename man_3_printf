COMMON PROJECT PRINTF / Sirs Haris HAMMACHE & Philippe MARCLAY, associated publishers, Copyright MMXXIII

L I B R A R Y   M A N 
for  P  R  I  N  T  F


Published on 20.11.2023

---------------------------------------------------------------------------------------------------
NAME: PRINTF  /  LIBRARY: Standard C Library
---------------------------------------------------------------------------------------------------

SYNOPSIS

#include <stdio.h>

int printf(const char *format,...);
int fprintf (FILE +stream, const char *format,...);
int sprintf (char *str, const char *format, ...);
int snprintf (char *str, size_t size, const char +format, ...);

#inlcude <stdarg.h>

int vprintf (const char *format, va_list ap);
int vfprintf(FILE *stream, const char *format, va_list ap);
int vsnprintf (char *str, size8t size, const char *format, va_list ap)

---------------------------------------------------------------------------------------------------
DESCRIPTION

The functions in the printf() produce output according to a format as descrbed below.
The functions printf() write output to stdout, the standart output stream.

All of these functions write the output under the control of a format string that specifies how subsequent arguments (or arguments accessed via the variable-length argument facilities of stdarg(3)) are converted for output.

The format string is a character string, beginning and ending in its initial shift state, if any.
The format string is composed of zero or more directives: ordinary characters (not %), which are copied unchanged to the output stream; and conversion specifications, each of which results in fetching zero or more subsequent arguments.
Each conversation specification is introduced by the character %, and ends with a conversion specifier.
In between there may be, in this order, zero or more flags, an optional minimum field width, an optional precision and an optional length modifier.

For c
If no l modifier is present, the int aurgument is converted to an unsigned char, and the resulting character is written. If an l midifier is present, the wint_t (wide character) argument is converted to a multibyte sequence by a call to the wcrtomb (3) function for exemple, with a conversion state starting in the initial state, and the resuting multibyte string is written.

For s
If no l modifier is present: the const char * argument is expected to be a pointer to an array of character type (pointer to a string). Characters from the array are writtent up to, but not including, a terminating null byte ('\0'); if a precision is specified, no more than the number specified are written. If the precision is not specified, or is greater than the size of the array, the array must contain a terminating nulle byte.

For %
A '%' is written. No argument is converted. The complete conversion specification is '%%'.

------------------------------------------------------------------------------------------------------
RETURN VALUE 
Upon successful return, these functions return the number of characters printed, excluding the null byte used to end output to strings.
The functions printf(percentage) and vsnprintf() for exemples do not write more thhan size bytes, including the terminating null byte ('\0').
If the output was truncated due ti this limit, then the return value is the number of characters, excluding the termating null byte, which would have been written to the finalstring if enough space had been available.
Thus, a return value of size or more means that the output was truncated.
If an output error is encountered, an negative value is returned.

ATTRIBUTES 
For an explanation of the terms used in this section 

Interface                   Attribute           Value 

printf(), fprintf(),        Thread safety       Mt-safe locale
sprintf(), snprintf(),
vprintf(), vfprintf(),
vsprintf(), vsnprintf()  

STANDARDS

fprintf()
printf()
sprintf()
vprintf()
vsprintf()
snprint()
vsnprintf()

HISTORY

fprintf()
printf()
sprintf()
vprintf()
vsprintf()
snprint()
vsnprintf()
    C89, POSIX.1-2001.
snprint()
vsnprintf() 
    SUSv2, C99, POSIX.1-2001.

Notes about ISO Standard references: 
C89 / This was the first C language standard, ratified by ANSI(American National Standards Institute) in 1989 (X3.159-1989).
Sometimes this is known as ANSI C, but since C99 is also an ANSI standard, this term is ambiguous.
This standard was also ratified by ISO (International Standards Organization) in 1990 (ISO/IEC 9899:1990), and is thus occasionally referred to as ISO C90.
C99 / This revision of the C language standard was ratified by ISO in 1999 (ISO/IEC 9899:1999).
SUSv2 / Single UNIX Specification version 2. Sometimes also referred to as XPG5 incorrecly. 
This standard appeared in 1997. Systems conforming to this standard can be branded UNIX 98.
POSIX.1-2001 / This was a 2001 revision and consolidation ot the POSIX.1, POSIX.2 and SUS standards into a single document.
The POSIX.1-2001 document can be branded UNIX 03.

CAVEATS


_________________________________________________________________________________________________________________________
Linux man pages / PRINTF / 2023.11.21 / HH/PhM
______________________________________________________________________________________________________________________________


